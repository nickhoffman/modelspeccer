module ModelSpeccer

  # decribe_model_factory(model) # {{{
  #
  # Ensures that a Factory for the specified model can build and create instances of that model.
  #
  # Arguments:
  #   -The 'model' arg must be a model class.
  #
  # An exception is raised if an argument is invalid.
  #
  # Example call:
  #   describe_model_factory User
  #
  def self.describe_model_factory(model)
    raise 'The 1st argument (model) must be a Model class' unless model.is_a? Class
  
    describe model, "factory" do
      it "should build a valid #{model}" do
        built_model = Object.send "build_#{model.to_s.downcase}"
        built_model.should be_valid
      end
  
      it "should create a valid #{model}" do
        created_model = Object.send "create_#{model.to_s.downcase}"
        created_model.should be_valid
        created_model.should == model.find(created_model.id)
        created_model.destroy
      end
    end
  end # }}}
  
  # decribe_model_attribute(model, attribute, valid_values = [], invalid_values = []) # {{{
  #
  # Ensures that an instance of class 'model' with the specified attribute is:
  #   -Valid for each of the values in the 'valid_values' array.
  #   -Invalid for each of the values in the 'invalid_values' array.
  #
  # Arguments:
  #   -The 'model' arg must be a model class.
  #   -The 'attribute' arg must be a symbol named after an attribute of the specified model class.
  #   -The '*_values' args must be arrays in this format:
  #      [ 'Description', 'value' ]
  #
  # An exception is raised if an argument is invalid.
  #
  # Example call:
  #   valid_username_values = [
  #     'if it has a digit',   'foo4bar',
  #     "if it has a '_'",     'foo_bar',
  #     ]
  #   invalid_username_values = [
  #     "if it has an '!'",    'foo!bar',
  #     "if it has a ':'",     'f:oobar',
  #     ]
  #   describe_model_attribute User, :username, valid_username_values, invalid_username_values
  #
  def self.describe_model_attribute(model, attribute, valid_values = [], invalid_values = [])
    raise 'The 1st argument (model) must be a Model class'      unless model.is_a?          Class
    raise 'The 2nd argument (attribute) must be a Symbol'       unless attribute.is_a?      Symbol
    raise 'The 3rd argument (valid_values) must be an array'    unless valid_values.is_a?   Array
    raise 'The 4th argument (invalid_values) must be an array'  unless invalid_values.is_a? Array
  
    unless valid_values.empty?
      describe model, "attribute '#{attribute}' should be valid" do
        # Ensure that each valid value produces a valid instance of 'model' and no error message.
        valid_values.in_groups_of(2) do |description, value|
          it description do
            p = Object.send "build_#{model.to_s.downcase}", {attribute => value}
            p.save
            p.should be_valid
            p.should have(0).error_on(attribute)
            p.destroy
          end
        end
      end
    end
  
    unless invalid_values.empty?
      describe model, "attribute '#{attribute}' should be invalid" do
        # Ensure that each invalid value produces an invalid model and related error message.
        invalid_values.in_groups_of(2) do |description, value|
          it description do
            p = Object.send "build_#{model.to_s.downcase}", {attribute => value}
            p.save
            p.should_not be_valid
            p.should have_at_least(1).error_on(attribute)
          end
        end
      end
    end
  end # }}}
  
  # check_model_attributes_when_nil(model, required_attributes, attributes_with_error_messages = []) # {{{
  #
  # Ensures that an instance of the specified model:
  #   -is valid when an optional attribute is nil,
  #   -is invalid when a required attribute is nil,
  #   -has an error message on certain attributes when those attributes are nil
  #
  # Arguments:
  #   -The 'model' argument must be a model class.
  #   -The 'required_attributes' argument must be an array.
  #   -The 'attributes_with_error_messages' argument is optional. If used, it must be an array.
  #
  # An exception is raised if an argument is invalid.
  #
  # Example call:
  #   # The 'hashed_password' and 'salt' attributes, when nil, should not have error messages because
  #   #   instead of being specified by the application's user, they are generated by the modelinstead.
  #   # The 'password' attribute, when nil, should have an error message because it is specified by
  #   #   the application's user, and needed for generating the hashed password.
  #   check_model_attributes_when_nil User, [username, password, hashed_password, salt], [username, password]
  #
  def self.check_model_attributes_when_nil(model, required_attributes, attributes_with_error_messages = [])
    raise 'The 1st argument (model) must be a model class.'                     unless model.is_a? Class
    raise 'The 2nd argument (required_attributes) must an array.'               unless required_attributes.is_a? Array
    raise 'The 3rd argument (attributes_with_error_messages) must be an array.' unless attributes_with_error_messages.is_a? Array
  
    columns_to_check = model.column_names
    columns_to_check.delete 'id'
    columns_to_check.delete 'created_at'
    columns_to_check.delete 'updated_at'
  
    columns_to_check.each do |attribute|
      describe model, "with '#{attribute}' set to nil" do
        before(:each) do
          @model_instance = Object.send "build_#{model.to_s.downcase}"
          @model_instance.send "#{attribute}=", nil
          @model_instance.save
        end
  
        if required_attributes.include? attribute
          it "should be invalid" do
            @model_instance.should_not be_valid
          end
        else
          it "should be valid" do
            @model_instance.should be_valid
          end
        end
  
        if attributes_with_error_messages.include? attribute
          it "should have an error message for '#{attribute}'" do
            @model_instance.errors[:"#{attribute}"].should_not be_nil
          end
        end # if
  
      end # End describe
    end # End .each
  end # }}}

end # End module ModelSpeccer
